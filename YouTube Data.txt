//Toutube Tutorials 
// Lecture 1
//Introduction 
C# HelloWorld Program
The namespace declaration, using System, indicates that you are using the System namespace.
A namespace is used to organize code 
Main method is the entry point of the application.



//Lecture 2
//Read and Write from Console
1. Reading from the console
2. Writing to the console
3. Two ways to write to console
     a) Concatenation
     b) Place holder syntax – Most preferred  
4. C# is case senstive



//Lecture 3
//Built-in types in C#
1. Boolean type – Only true or false 
2. Integral Types - sbyte, byte, short, ushort, int, uint, long, ulong, char
3. Floating Types – float and double
4. Decimal Types 

//Lecture 4
A string with an @ symbol prefix, as in "\“Hello"\” is Verbatim Literal.
 @"\C:\Program\User\CSharpcourse";
Verbatim literals make escape sequences translate as normal printable characters to enhance readability.


//Lecture 5
//Operators
Assignment Operator =
Arithmetic Operators like +,-,*,/,% 
Comparison Operators like ==, !=,>, >=, <, <= 
Conditional Operators like &&, ||
Ternary Operator , simplfies 10 lines code for a simple condition in just 3 lines
e.g. int num = 100;
bool inNumber= number ==98 ?true: false;


//Lecture 6
//Nullable Types
C# types  are divided into 2 broad categories.
1. Not-Nullable types................(can not be initialize without any value):
     e.g. int, bool.
     We can make Not-Nullable as Nullable by putting a "?" Question Marks.
     
2. Nullable types........................(can be initialize without any value):
     e.g. string 
     
Nullable are more improtant
Not Nullable can  be cunverted to Nullable using "?" 
Used Here:
bool yes= true;
bool no= false;
enter your choice = ? (yes or no)
//if user select no option this bool would be initialize as null so we always try to convert not nullable to nullable type using "?". And this is very benificient.

Note:  Nullable and Not Nullable conversion is EXPLICIT CONVERSION not IMPLICIT
Without Coalescing Operator code was dense
Using Coalescing Operator code shrinks to only 3 lines
            int? TicketsOnSale = null; //87;
            int Tickets = TicketsOnSale ?? 0;
            Console.WriteLine("Available Tickets={0}", Tickets);

Value Types  - int, float, double, structs, enums etc   
Reference Types – Interface, Class, delegates, arrays etc


//Lecture 7
Type Conversion
There are 3 types of type Conversion (Revised)
              1. Implicit (Simplest)
              2. Explicit (Cascading)
              3. Non-Compatible (uisng Convert.ToInt/ToString  function) 
              
In decelaration it is necessary to mention "f" while describing float, mean if we only write:
float f= 12.02; (wrong/error)
//this would throw error because it would consider it as double type.
float f= 12.02f; (no error)

#Parse and Convert do same things (In the case of Non compatible conversion)
 string str= "1234"
 int number1 = int.Parse(str);
 int number 2= Convert.ToInt32(str);
 
 For more complex (non compatible conversion we use Tryparse() //function.
 This TryPase would give a warning that you are requested to change the convertable string into integer.
          
          bool check = int.TryParse(convertnumber, out result); 
            if (check)
            {
                Console.WriteLine("string to integer = {0}", result);
            }
            else
            {
                Console.WriteLine("Your string can not be converted into integer. Pleases reonsider it");
            }
            


//Lecture 8
//Arrays
1. Arrays initialization
2. Arrays Printing 
      a) Simple printing using repeating Console.WriteLine 
      b) using for Loop
3. Advantages and Disadvantages of Arrays
     Advantages:
          Arrays are strongly typed.
     Disadvantages:
          Have fix size and type
   


//Lecture 9
//Comments
Comments are used to document what the program does 
1. Single line Comments   //
2. Multi line Comments    /*  */
3. XML Documentation Comments      -   /// (To be discussed in latter sections)

To Comment and Uncomment, there are 2 ways
1. Use the designer 
         (No common way)
2. Keyboard Shortcut: Ctrl+K, Ctrl+C and Ctrl+K, Ctrl+U 
          (Easy & common way) 



//Lecture 10 
//If Statement
check condition
if use && 
     (Double &)this does not checks 2nd condition  if 1st condition is true
if use &
     (Single &) this checks both conditions even if 1st condition is true
if use || 
     (Single ||) this checks both conditions even if 1st condition is true
use |
     (Single |) this checks both conditions even if 1st condition is true


//Lecture 11
//Switch Statement
This statement Replaces if/else with case and reduces the code complexity
Case is used in switch block.
Case statement ends using break statement.
case 10:
case 20:   (used for OR statement)
case 30:
