//Toutube Tutorials 
// Lecture 1
//Introduction 
C# HelloWorld Program
The namespace declaration, using System, indicates that you are using the System namespace.
A namespace is used to organize code 
Main method is the entry point of the application.



//Lecture 2
//Read and Write from Console
1. Reading from the console
2. Writing to the console
3. Two ways to write to console
     a) Concatenation
     b) Place holder syntax – Most preferred  
4. C# is case senstive



//Lecture 3
//Built-in types in C#
1. Boolean type – Only true or false 
2. Integral Types - sbyte, byte, short, ushort, int, uint, long, ulong, char
3. Floating Types – float and double
4. Decimal Types 

//Lecture 4
A string with an @ symbol prefix, as in "\“Hello"\” is Verbatim Literal.
 @"\C:\Program\User\CSharpcourse";
Verbatim literals make escape sequences translate as normal printable characters to enhance readability.


//Lecture 5
//Operators
Assignment Operator =
Arithmetic Operators like +,-,*,/,% 
Comparison Operators like ==, !=,>, >=, <, <= 
Conditional Operators like &&, ||
Ternary Operator, simplfies 10 lines code for a simple condition in just 3 lines


//Lecture 6
//Nullable Types
C# types  are divided into 2 broad categories.
1. Not-Nullable types................(can not be initialize without any value):
     e.g. int, bool.
     We can make Not-Nullable as Nullable by putting a "?" Question Marks.
     
2. Nullable types........................(can be initialize without any value):
     e.g. string 
     
Nullable are more improtant
Not Nullable can  be cunverted to Nullable using "?" 
Used Here:
bool yes= true;
bool no= false;
enter your choice = ? (yes or no)
//if user select no option this bool would be initialize as null so we always try to convert not nullable to nullable type using "?". And this is very benificient.

Note:  Nullanle and Not Nullable conversion is EXPLICIT CONVERSION not IMPLICIT
Without Coalescing Operator code was dense
Using Coalescing Operator code shrinks to only 3 lines
            int? TicketsOnSale = null; //87;
            int Tickets = TicketsOnSale ?? 0;
            Console.WriteLine("Available Tickets={0}", Tickets);

Value Types  - int, float, double, structs, enums etc   
Reference Types – Interface, Class, delegates, arrays etc
